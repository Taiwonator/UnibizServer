/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  AuthenticatedUserResponse: { // root type
    jwt?: string | null; // String
  }
  Event: { // root type
    id?: string | null; // ID
    name?: string | null; // String
    type?: string | null; // String
  }
  Mutation: {};
  Query: {};
  Society: { // root type
    id?: string | null; // ID
    name?: string | null; // String
  }
  Uni: { // root type
    id?: string | null; // ID
    name?: string | null; // String
  }
  Union: { // root type
    id?: string | null; // ID
    name?: string | null; // String
  }
  User: { // root type
    email?: string | null; // String
    id?: string | null; // ID
    name?: string | null; // String
    password?: string | null; // String
    type?: Array<string | null> | null; // [String]
  }
}

export interface NexusGenInterfaces {
  Node: NexusGenRootTypes['Event'] | NexusGenRootTypes['Society'] | NexusGenRootTypes['Uni'] | NexusGenRootTypes['Union'] | NexusGenRootTypes['User'];
  Token: NexusGenRootTypes['AuthenticatedUserResponse'];
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  AuthenticatedUserResponse: { // field return type
    jwt: string | null; // String
  }
  Event: { // field return type
    id: string | null; // ID
    name: string | null; // String
    society: NexusGenRootTypes['Society'] | null; // Society
    type: string | null; // String
  }
  Mutation: { // field return type
    createUser: NexusGenRootTypes['AuthenticatedUserResponse'] | null; // AuthenticatedUserResponse
    loginUser: NexusGenRootTypes['AuthenticatedUserResponse'] | null; // AuthenticatedUserResponse
  }
  Query: { // field return type
    Event: Array<NexusGenRootTypes['Event'] | null> | null; // [Event]
    Society: Array<NexusGenRootTypes['Society'] | null> | null; // [Society]
    Uni: Array<NexusGenRootTypes['Uni'] | null> | null; // [Uni]
    Union: Array<NexusGenRootTypes['Union'] | null> | null; // [Union]
    User: Array<NexusGenRootTypes['User'] | null> | null; // [User]
    hello: string | null; // String
  }
  Society: { // field return type
    events: Array<NexusGenRootTypes['Event'] | null> | null; // [Event]
    id: string | null; // ID
    name: string | null; // String
    union: Array<NexusGenRootTypes['Union'] | null> | null; // [Union]
    unionRequests: Array<NexusGenRootTypes['Union'] | null> | null; // [Union]
    userRequests: Array<NexusGenRootTypes['User'] | null> | null; // [User]
    users: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  Uni: { // field return type
    id: string | null; // ID
    name: string | null; // String
  }
  Union: { // field return type
    id: string | null; // ID
    name: string | null; // String
    societies: Array<NexusGenRootTypes['Society'] | null> | null; // [Society]
    societyRequests: Array<NexusGenRootTypes['Society'] | null> | null; // [Society]
    uni: NexusGenRootTypes['Uni'] | null; // Uni
    userRequests: Array<NexusGenRootTypes['User'] | null> | null; // [User]
    users: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  User: { // field return type
    email: string | null; // String
    id: string | null; // ID
    name: string | null; // String
    password: string | null; // String
    societies: Array<NexusGenRootTypes['Society'] | null> | null; // [Society]
    societyRequests: Array<NexusGenRootTypes['Society'] | null> | null; // [Society]
    type: Array<string | null> | null; // [String]
    unionRequests: Array<NexusGenRootTypes['Union'] | null> | null; // [Union]
    unions: Array<NexusGenRootTypes['Union'] | null> | null; // [Union]
  }
  Node: { // field return type
    id: string | null; // ID
  }
  Token: { // field return type
    jwt: string | null; // String
  }
}

export interface NexusGenFieldTypeNames {
  AuthenticatedUserResponse: { // field return type name
    jwt: 'String'
  }
  Event: { // field return type name
    id: 'ID'
    name: 'String'
    society: 'Society'
    type: 'String'
  }
  Mutation: { // field return type name
    createUser: 'AuthenticatedUserResponse'
    loginUser: 'AuthenticatedUserResponse'
  }
  Query: { // field return type name
    Event: 'Event'
    Society: 'Society'
    Uni: 'Uni'
    Union: 'Union'
    User: 'User'
    hello: 'String'
  }
  Society: { // field return type name
    events: 'Event'
    id: 'ID'
    name: 'String'
    union: 'Union'
    unionRequests: 'Union'
    userRequests: 'User'
    users: 'User'
  }
  Uni: { // field return type name
    id: 'ID'
    name: 'String'
  }
  Union: { // field return type name
    id: 'ID'
    name: 'String'
    societies: 'Society'
    societyRequests: 'Society'
    uni: 'Uni'
    userRequests: 'User'
    users: 'User'
  }
  User: { // field return type name
    email: 'String'
    id: 'ID'
    name: 'String'
    password: 'String'
    societies: 'Society'
    societyRequests: 'Society'
    type: 'String'
    unionRequests: 'Union'
    unions: 'Union'
  }
  Node: { // field return type name
    id: 'ID'
  }
  Token: { // field return type name
    jwt: 'String'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createUser: { // args
      email?: string | null; // String
      name?: string | null; // String
      password?: string | null; // String
      type?: string | null; // String
    }
    loginUser: { // args
      email?: string | null; // String
      password?: string | null; // String
    }
  }
}

export interface NexusGenAbstractTypeMembers {
  Node: "Event" | "Society" | "Uni" | "Union" | "User"
  Token: "AuthenticatedUserResponse"
}

export interface NexusGenTypeInterfaces {
  AuthenticatedUserResponse: "Token"
  Event: "Node"
  Society: "Node"
  Uni: "Node"
  Union: "Node"
  User: "Node"
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    resolveType: false
    __typename: false
    isTypeOf: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}