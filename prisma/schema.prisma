generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model public_user {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  email    String @unique
  token   String
}

model user {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  email    String @unique
  name     String
  type     String[]
  societyIds           String[]    @db.ObjectId
  societies            society[]  @relation(name: "userSocieties", fields: [societyIds], references: [id])
  unionIds             String[]    @db.ObjectId
  unions               union[]    @relation(name: "userUnions", fields: [unionIds], references: [id])
  societyRequestIds    String[]    @db.ObjectId
  societyRequests      society[]  @relation(name: "userSocietyRequests", fields: [societyRequestIds], references: [id])
  unionRequestIds      String[]    @db.ObjectId
  unionRequests        union[]    @relation(name: "userUnionRequests", fields: [unionRequestIds], references: [id])
  interestedEventIds           String[]    @db.ObjectId
  interestedEvents            event[]  @relation(name: "interestedUsers", fields: [interestedEventIds], references: [id])
  auths auth_method[] @relation(name: "userAuths")
  state user_state? @relation(name: "userState")
}

model user_state {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId String? @db.ObjectId @unique
  user user? @relation(name: "userState", fields: [userId], references: [id])
  currentGroup  String? @db.ObjectId
  previouslyLoggedIn   DateTime?
}

model auth_method {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  method AuthenticationMethod
  authId String @db.ObjectId
  userId  String @db.ObjectId  
  user     user    @relation(name: "userAuths", fields: [userId], references: [id])
}

model credentials_user {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  password String
}

model google_user {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
}

model event {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  description String?
  slug       String @unique
  name       String
  society    society?  @relation(fields: [societyId], references: [id])
  societyId  String? @db.ObjectId
  location   location?  @relation(fields: [locationId], references: [id])
  locationId String?  @db.ObjectId  @unique
  tags   EventType[]
  date DateTime @default(now())
  thumbnailUrl  String?
  bannerUrl     String?
  eventImageUrls    String[]
  registerLink String?
  likes       Int @default(0)
  interestedUserIds         String[]  @db.ObjectId
  interestedUsers           user[]    @relation(name: "interestedUsers", fields: [interestedUserIds], references: [id])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model society {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  shortName       String
  description     String?
  imageUrl     String?
  userIds         String[]  @db.ObjectId
  users           user[]    @relation(name: "userSocieties", fields: [userIds], references: [id])
  userRequestIds  String[]  @db.ObjectId
  userRequests    user[]    @relation(name: "userSocietyRequests", fields: [userRequestIds], references: [id])
  eventIds        String[]  @db.ObjectId
  events          event[]  
  unionId         String? @db.ObjectId  
  union           union?    @relation(fields: [unionId], references: [id])
  unionRequestIds      String[]    @db.ObjectId
  unionRequests        union[]    @relation(name: "societyUnionRequests", fields: [unionRequestIds], references: [id])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model union {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  shortName       String 
  imageUrl     String?
  faqs            faqs[] 
  faqIds          String[] @db.ObjectId 
  uni             uni?    @relation(fields: [uniId], references: [id])
  uniId           String?  @db.ObjectId  @unique
  userIds         String[]  @db.ObjectId
  users           user[]    @relation(name: "userUnions", fields: [userIds], references: [id])
  userRequestIds  String[]  @db.ObjectId
  userRequests    user[]    @relation(name: "userUnionRequests", fields: [userRequestIds], references: [id])
  societies       society[]  
  societyIds      String[]  @db.ObjectId
  societyRequestIds    String[]    @db.ObjectId
  societyRequests      society[]  @relation(name: "societyUnionRequests", fields: [societyRequestIds], references: [id])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
}

model faqs {
  id String  @id @default(auto()) @map("_id") @db.ObjectId
  question            String
  answer            String
  unionId    String? @db.ObjectId  
  union      union? @relation(fields: [unionId], references: [id])
}

model uni {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  name       String @unique
  unionId    String? @db.ObjectId  
  union      union?
}

enum AuthenticationMethod {
  GOOGLE
  CREDENTIALS
}

model location {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  type     LocationType
  address  String?
  link     String?
  eventId String? @db.ObjectId  @unique
  event event?
}

enum LocationType {
  ADDRESS
  ONLINE
  TBD
}

enum EventType {
  ALUMNI_REUNION
  ART_EXHIBIT
  CAMPUS_TOUR
  CAREER_FAIR
  CHARITY_EVENT
  CLUB_FAIR
  CLUB_MEETING
  CONCERT
  DEBATE_EVENT
  GAMING_EVENT
  GUEST_SPEAKER
  HACKATHON
  LECTURE
  MUSIC_EVENT
  MOVIE_NIGHT
  NETWORKING_EVENT
  PERFORMANCE
  POLITICAL_EVENT
  RELIGIOUS_EVENT
  RESEARCH_EVENT
  SEMINAR
  SPORTS_GAME
  STUDY_SESSION
  VOLUNTEER_EVENT
  WELLNESS_EVENT
  WORKSHOP
  OTHER
}